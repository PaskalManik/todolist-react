App.jsx
import React, { useState } from 'react';
import TaskInput from './components/taskinput';
import TaskItem from './components/TaskItem';
import Stats from './components/Stats.jsx';

function App() {
  const [toDoList, setToDoList] = useState([]);
  const [filterType, setFilterType] = useState('all'); 

  const addTask = (taskName, dueDate) => {
    // Check jika tugas dengan nama yang sama sudah ada
    if (toDoList.some(task => task.taskName === taskName)) {
      alert('Task with the same name already exists!');
      return;
    }

    const newTask = {
      taskName,
      checked: false,
      dueDate: dueDate,
      timestamp: new Date().toLocaleString() 
    };
    setToDoList([...toDoList, newTask]);
  };

  function deleteTask(deleteTaskName) {
    setToDoList(toDoList.filter((task) => task.taskName !== deleteTaskName));
  }

  function toggleCheck(taskName) {
    setToDoList((prevToDoList) =>
      prevToDoList.map((task) =>
        task.taskName === taskName ? { ...task, checked: !task.checked } : task
      )
    );
  }

  const editTaskName = (oldTaskName, newTaskName) => {
    // Check jika tugas dengan nama baru sudah ada
    if (toDoList.some(task => task.taskName === newTaskName)) {
      alert('Task with the same name already exists!');
      return;
    }

    setToDoList((prevToDoList) =>
      prevToDoList.map((task) =>
        task.taskName === oldTaskName ? { ...task, taskName: newTaskName } : task
      )
    );
  }

  // Filter tugas berdasarkan kondisi yang dipilih
  const filteredTasks = toDoList.filter((task) => {
    if (filterType === 'completed') {
      return task.checked;
    } else if (filterType === 'incomplete') {
      return !task.checked;
    } else {
      return true; // Semua tugas
    }
  });

  return (
    <>
      <div className="container">
        <h1>To Do List</h1>

        <TaskInput addTask={addTask} tasks={toDoList} />

        <div className="filters">
          <label>
            <input
              type="radio"
              value="all"
              checked={filterType === 'all'}
              onChange={() => setFilterType('all')}
            />
            All
          </label>
          <label>
            <input
              type="radio"
              value="completed"
              checked={filterType === 'completed'}
              onChange={() => setFilterType('completed')}
            />
            Completed
          </label>
          <label>
            <input
              type="radio"
              value="incomplete"
              checked={filterType === 'incomplete'}
              onChange={() => setFilterType('incomplete')}
            />
            Incomplete
          </label>
        </div>

        <div className="toDoList">
          <span>To Do : </span>
          <ul className="list-items">
            {filteredTasks.map((task, key) => (
              <TaskItem
                task={task}
                key={key}
                deleteTask={deleteTask}
                toggleCheck={toggleCheck}
                editTaskName={editTaskName}
              />
            ))}
          </ul>

          {filteredTasks.length === 0 && (
            <p className="notify">No tasks match the filter.</p>
          )}
        </div>
      </div>

      <Stats toDoList={toDoList} />
    </>
  );
}

export default App;

TaskItem.jsx
import React, { useState } from 'react';
import { MdDeleteSweep, MdEdit } from 'react-icons/md';

const TaskItem = ({ task, deleteTask, toggleCheck, editTaskName }) => {
  const [editMode, setEditMode] = useState(false);
  const [editedTaskName, setEditedTaskName] = useState(task.taskName);

  const handleEdit = () => {
    setEditMode(true);
  };

  const handleSave = () => {
    editTaskName(task.taskName, editedTaskName);
    setEditMode(false);
  };

  const handleChange = (e) => {
    setEditedTaskName(e.target.value);
  };

  return (
    <li className='items'>
      {!editMode ? (
        <div className='items-text'>
          <input
            type="checkbox"
            checked={task.checked}
            onChange={() => toggleCheck(task.taskName)}
          />
          <p className={task.checked ? 'isChecked' : ''}>{task.taskName}</p>
        </div>
      ) : (
        <div className='items-text'>
          <input type="text" value={editedTaskName} onChange={handleChange} />
        </div>
      )}
      <div>
        {!editMode ? (
          <MdEdit className='edit-icon' onClick={handleEdit} />
        ) : (
          <button className='save-button' onClick={handleSave}>Save</button>
        )}
        {!editMode && (
          <MdDeleteSweep
            className='delete-icon'
            onClick={() => deleteTask(task.taskName)}
          />
        )}
      </div>
    </li>
  );
};

export default TaskItem;

taskinput.jsx
import React, { useState } from 'react';

const TaskInput = ({addTask}) => {
    const [task,setTask]= useState('');

    console.log(task);
    function handleInputValue(event){
        setTask(event.target.value);
    }

    function handleAddTask(event){
        event.preventDefault();
        if(task.trim() === '') return;
        addTask(task);
        setTask('')
    }

    return (
        <form className='inputField' onSubmit = {handleAddTask}>
            <input type="text" value={task} placeholder='Add Item' onChange={handleInputValue}/>
            <button>+</button>
        </form>
    );
};

export default TaskInput;

Stats.jsx
import React from 'react';

const Stats = ({ toDoList }) => {
    let countList = toDoList.length;
    return (
        <div className='stats'>
            <p className='notify'>
                {countList === 0 ? 'You Does not have any task anymore ! Go SleepðŸ˜Ž' : `You have ${countList} items on your list.`}
            </p>
        </div>
    );
};

export default Stats;
